
var objectify = function(arr) {
        var obj = {};
        for(var k in arr) {
          obj[arr[k]['name']] = arr[k]['value'];
        }
        
        return obj;
      }

  $(document).ready(function() {
    var domain_template_items = [];
  
    var period_units = <%= Duration.units.to_json %>;
  
    var editing_item = null;
    
    var actions_icons = {
      'add': 'icon-plus',
      'remove': 'icon-minus',
      'mask': 'icon-filter'
    };
  
    $("[data-domain-template=save-btn]").click(function() {
      //serialize sortable items to hidden field json
      
      var items_data = ($("#domain-template-sortable li.sortable-item").map(function() { return $(this).data('item-data').attributes;}));
      
      var items_data = $.makeArray(items_data);
      
      // append hidden fields for each itemdata
      //$("#domain_template_domain_json").val(JSON.stringify(items_data));
      
      var form = $(this).closest('form');
      for(var i = 0; i < items_data.length; i++) {
        var namespace = 'domain_template[domain_stack_attributes][' + i + ']';
        for(var k in items_data[i]) {
          form.append(
          '<input type="hidden" name="' + 
          namespace + k + 
          '" value="'
          + items_data[i][k] + 
          '" />'
          );
        }
      }
      
      return true;
    });
  
    $("#domain-template-add-action-btn").click(function() {
      $("#domain-template-add-action").show();
      $("#domain-template-add-action-kind").val('0');
      $("#domain-template-add-type").val('0');
      $('[data-domain-form]').hide();
      editing_item = null;
    });
    
    $("#domain-template-add-type").change(function() {
      $('[data-domain-form]').hide();
      
      var form = $('[data-domain-form='+$(this).val()+']');
      form.show();
      // clear inputs
      form.find('input, select').val('')
    });
    
    $('#domain-template-sortable').sortable({
      placeholder: "ui-state-highlight",
      forcePlaceholderSize: true,
      handle: ".handle",
      axis: 'y',
      items: '> li.sortable-item'
    }).disableSelection();
    
    $('#domain-template-sortable').on('click','a[data-domain-item-btn=action]', function(e) {
      var itemdata = $(e.target).closest('li').data('item-data');
      
      switch(itemdata.action)
      {
        case 'add':
          itemdata.action = 'remove';
          break;
        case 'remove':
          itemdata.action = 'mask';
          break;
        case 'mask':
          itemdata.action = 'add';
          break;
      }
      
      $(e.target).find('i').attr('class', actions_icons[itemdata.action]);
      
    });
    
    $('#domain-template-sortable').on('click','a[data-domain-item-btn=remove]', function(e) {
      $(e.target).closest('li').remove();
    });

    $('#domain-template-sortable').on('click','a[data-domain-item-btn=edit]', function(e) {
      var itemel = $(e.target).closest('li');
      var itemdata = itemel.data('item-data');
      
      $("#domain-template-add-action").show();
      $("#domain-template-add-type").val(itemdata.type);
      
      $('[data-domain-form]').hide();
      var form = $('[data-domain-form='+itemdata.type+']');
      form.show();
      
      $("#domain-template-add-action-kind").val(itemdata.action);
      
      $.each(itemdata.attributes, function(k,v) {
        form.find('[name="'+k+'"]').val(v);
      });
      
      editing_item = itemel;
    });
    
    
    $("#domain-template-add-action-submit-btn").on('click', function() {
      var action_type = $("#domain-template-add-action-kind").val();
      if (action_type == '0')
        return false;
        
      var interval_type = $("#domain-template-add-type").val();
      if (interval_type == '0')
        return false;
        
      var item = {action: action_type, type: interval_type, attributes: {}};
      
      
      
      if (interval_type == 'boundless') {
        item.attributes = objectify($("#boundless-domain-form form").serializeArray());
        item.text = 
          'Each ' + item.attributes['[period][duration]'] + ' ' + period_units[item.attributes['[period][unit]']] + 
          ' repeat ' + item.attributes['[duration][duration]'] + ' ' + period_units[item.attributes['[duration][unit]']] +
          ' from ' + item.attributes['[from(1i)]'] + '-' + item.attributes['[from(2i)]']+ '-' + item.attributes['[from(3i)]']+ ' ' + item.attributes['[from(4i)]']+ ':' + item.attributes['[from(5i)]'];
      }
      else if (interval_type == 'bounded') {
        item.attributes = objectify($("#bounded-domain-form form").serializeArray());
        item.text = item.attributes['[from(1i)]'] + '-' + item.attributes['[from(2i)]']+ '-' + item.attributes['[from(3i)]']+ ' ' + item.attributes['[from(4i)]']+ ':' + item.attributes['[from(5i)]'] + ' to '+ item.attributes['[to(1i)]'] + '-' + item.attributes['[to(2i)]']+ '-' + item.attributes['[to(3i)]']+ ' ' + item.attributes['[to(4i)]']+ ':' + item.attributes['[to(5i)]'];
      }
      else if (Number(interval_type) > 0){
        item.attributes = {'[domain_template_id]': interval_type };
        interval_type = 'database';
        
        item.text = $("#domain-template-add-type option:selected").text()
      }
      
      delete item.attributes['utf8'];
      delete item.attributes['authenticity_token'];
      item.attributes['[type]'] = interval_type;
      item.attributes['[action]'] = action_type;
      
      console.log ('atributes', item);
      
      var itembox;
      if (editing_item == null) {
        itembox = $(
        '<li class="sortable-item">' +
          '<div class="btn-group">' +
            '<a class="btn handle"><i class="icon-resize-vertical"></i></a>' +
            '<a class="btn" data-domain-item-btn="action"><i class="icon-minus"></i></a>' +
            '<span class="btn" data-domain-item="title"></span>' +
            '<a class="btn" data-domain-item-btn="edit"><i class="icon-pencil"></i></a>' +
            '<a class="btn" data-domain-item-btn="remove"><i class="icon-trash"></i></a>' +
          '</div>' +
        '</li>');
        
        $('#domain-template-sortable .first').after(itembox);
      } else {
        itembox = editing_item;
        editing_item = null;
      }

      itembox.data('item-data', item);
      itembox.find('[data-domain-item-btn=action] i').attr('class', actions_icons[item.action]);
      itembox.find('[data-domain-item=title]').text(item.text);

      
      $("#domain-template-add-action").hide();
      $("#domain-template-add-type").val('0');
      return false;
    });
  
  });